name: Python tests

on: [ push, workflow_dispatch ]

jobs:
  test:
    runs-on: ubuntu-22.04
    container:
      image: python:3.10.12-slim-bookworm
    strategy:
      matrix:
        python-version: [ "3.10.12" ]
        poetry-version: [ "1.8.3" ]

    # Service containers to run with `test`
    services:
      # https://docs.github.com/en/actions/using-containerized-services/creating-postgresql-service-containers
      postgres:
        # Docker Hub image
        image: postgres:15.2
        # Provide the password for postgres
        env:
          POSTGRES_DB: gooey
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        # Set health checks to wait until postgres has started
        options: >-
          --name postgres
          --entrypoint /usr/local/bin/docker-entrypoint.sh postgres -c 'max_connections=10000'
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      # https://docs.github.com/en/actions/using-containerized-services/creating-redis-service-containers
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 6379 on service container to the host
          - 6379:6379
    steps:
      # https://remarkablemark.org/blog/2022/05/12/github-actions-postgresql-increase-max-connections-and-shared-buffers/
      # - name: Increase max_connections
      #   run: >-
      #     docker exec -i postgres bash << EOF
      #       sed -i -e 's/max_connections = 100/max_connections = 10000/' /var/lib/postgresql/data/postgresql.conf
      #     EOF
      # - name: Restart postgres
      #   run: >-
      #     docker restart postgres
      #     && while ! docker exec postgres pg_isready; do sleep 5; done

      - name: Install system dependencies
        run: >-
          apt-get update && apt-get install -y --no-install-recommends
          libpoppler-cpp-dev
          python3-opencv
          postgresql-client
          libzbar0

      - uses: actions/checkout@v4

      - name: Setup Python, Poetry and Dependencies
        uses: packetcoders/action-setup-cache-python-poetry@main
        with:
          python-version: ${{matrix.python-version}}
          poetry-version: ${{matrix.poetry-version}}
          install-args: --only main

      - name: Run tests
        env:
          PGHOST: localhost
          PGPORT: 5432
          PGDATABASE: gooey
          PGUSER: postgres
          PGPASSWORD: password
          REDIS_URL: redis://localhost:6379/0
          REDIS_CACHE_URL: redis://localhost:6379/1
          APP_BASE_URL: http://localhost:3000
          API_BASE_URL: http://localhost:8080
          ADMIN_BASE_URL: http://localhost:8000
          GCP_PROJECT: ${{ vars.GCP_PROJECT }}
          GCP_REGION: ${{ vars.GCP_REGION }}
          GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          ELEVEN_LABS_API_KEY: ${{ secrets.ELEVEN_LABS_API_KEY }}
          AZURE_SPEECH_REGION: ${{ secrets.AZURE_SPEECH_REGION }}
          AZURE_SPEECH_KEY: ${{ secrets.AZURE_SPEECH_KEY }}
          AZURE_FORM_RECOGNIZER_ENDPOINT: ${{ secrets.AZURE_FORM_RECOGNIZER_ENDPOINT }}
          AZURE_FORM_RECOGNIZER_KEY: ${{ secrets.AZURE_FORM_RECOGNIZER_KEY }}
          TEST_SLACK_TEAM_ID: ${{ secrets.TEST_SLACK_TEAM_ID }}
          TEST_SLACK_USER_ID: ${{ secrets.TEST_SLACK_USER_ID }}
          TEST_SLACK_AUTH_TOKEN: ${{ secrets.TEST_SLACK_AUTH_TOKEN }}
        run: |
          poetry run ./scripts/run-tests.sh

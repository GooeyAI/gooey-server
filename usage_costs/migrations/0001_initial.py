# Generated by Django 4.2.7 on 2024-02-06 18:22

import bots.custom_fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('bots', '0057_message_response_time_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ModelPricing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('model_id', models.TextField(help_text='The model ID. Model ID + SKU should be unique together.')),
                ('sku', models.IntegerField(choices=[(1, 'LLM Prompt'), (2, 'LLM Completion')], help_text="The model's SKU. Model ID + SKU should be unique together.")),
                ('unit_cost', models.DecimalField(decimal_places=10, help_text='The cost per unit.', max_digits=15)),
                ('unit_quantity', models.PositiveIntegerField(help_text='The quantity of the unit. (e.g. 1000 tokens)')),
                ('category', models.IntegerField(choices=[(1, 'LLM')], help_text='The category of the model. Only used for Display purposes.')),
                ('provider', models.IntegerField(choices=[(1, 'OpenAI'), (2, 'Google'), (3, 'TogetherAI'), (4, 'Azure OpenAI')], help_text='The provider of the model. Only used for Display purposes.')),
                ('model_name', models.CharField(choices=[('gpt_4_vision', 'GPT-4 Vision (openai)'), ('gpt_4_turbo', 'GPT-4 Turbo (openai)'), ('gpt_4', 'GPT-4 (openai)'), ('gpt_4_32k', 'GPT-4 32K (openai)'), ('gpt_3_5_turbo', 'ChatGPT (openai)'), ('gpt_3_5_turbo_16k', 'ChatGPT 16k (openai)'), ('llama2_70b_chat', 'Llama 2 (Meta AI)'), ('palm2_chat', 'PaLM 2 Chat (Google)'), ('palm2_text', 'PaLM 2 Text (Google)'), ('text_davinci_003', 'GPT-3.5 Davinci-3 (openai)'), ('text_davinci_002', 'GPT-3.5 Davinci-2 (openai)'), ('text_curie_001', 'Curie (openai)'), ('text_babbage_001', 'Babbage (openai)'), ('text_ada_001', 'Ada (openai)'), ('code_davinci_002', 'Codex [Deprecated] (openai)')], help_text='The name of the model. Only used for Display purposes.', max_length=255)),
                ('notes', models.TextField(blank=True, default='', help_text='Any notes about the pricing. (e.g. how the pricing was calculated)')),
                ('pricing_url', bots.custom_fields.CustomURLField(blank=True, default='', help_text='The URL of the pricing.', max_length=2048)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='UsageCost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField()),
                ('unit_cost', models.DecimalField(decimal_places=10, help_text='The cost per unit, recorded at the time of the usage.', max_digits=15)),
                ('unit_quantity', models.PositiveIntegerField(help_text='The quantity of the unit (e.g. 1000 tokens), recorded at the time of the usage.')),
                ('dollar_amount', models.DecimalField(decimal_places=10, help_text='The dollar amount, calculated as unit_cost x quantity / unit_quantity.', max_digits=15)),
                ('notes', models.TextField(blank=True, default='')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('pricing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_costs', to='usage_costs.modelpricing')),
                ('saved_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_costs', to='bots.savedrun')),
            ],
        ),
        migrations.AddIndex(
            model_name='modelpricing',
            index=models.Index(fields=['model_id', 'sku'], name='usage_costs_model_i_d7b80a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='modelpricing',
            unique_together={('model_id', 'sku')},
        ),
    ]
